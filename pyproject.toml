[project]
name = "RfPlayer"
requires-python = ">= 3.12"
dynamic = ["version"]
dependencies = [
    "homeassistant~=2024.9",
    "pydantic~=1.10",
    "pyserial~=3.5",
    "pyserial-asyncio~=0.6",
    "jsonpath-ng~=1.6"
]
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 4 - Beta",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Home Automation",

  # Pick your license as you wish (see also "license" above)
  "License :: OSI Approved :: Apache License, Version 2.0",

  # Specify the Python versions you support here.
  "Programming Language :: Python :: 3.12",
]

[tool.uv]
dev-dependencies = [
    "pre-commit~=3.8",
    "pytest~=8.2",
    "pytest-cov~=5.0",
    "pytest-homeassistant-custom-component~=0.13",
    "pytest-asyncio~=0.23",
    "pytest-mock~=3.14",
    "pytest-html~=4.1",
    "colorlog~=6.8",
    "ruff~=0.4",
    "mypy~=1.10",
    "types-PyYAML~=6.0"
]
constraint-dependencies = ["uv>=0.4"]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["custom_components"]


[tool.pytest.ini_options]
testpaths = [
    "tests",
]
norecursedirs = [
    ".git",
    "testing_config",
]
log_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(threadName)s %(name)s:%(filename)s:%(lineno)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "error::sqlalchemy.exc.SAWarning",

    # -- HomeAssistant - aiohttp
    # Overwrite web.Application to pass a custom default argument to _make_request
    "ignore:Inheritance class HomeAssistantApplication from web.Application is discouraged:DeprecationWarning",
    # Hass wraps `ClientSession.close` to emit a warning if the session is closed accidentally
    "ignore:Setting custom ClientSession.close attribute is discouraged:DeprecationWarning:homeassistant.helpers.aiohttp_client",
    # Modify app state for testing
    "ignore:Changing state of started or joined application is deprecated:DeprecationWarning:tests.components.http.test_ban",

    # -- Tests
    # Ignore custom pytest marks
    "ignore:Unknown pytest.mark.disable_autouse_fixture:pytest.PytestUnknownMarkWarning:tests.components.met",
    "ignore:Unknown pytest.mark.dataset:pytest.PytestUnknownMarkWarning:tests.components.screenlogic",

]

[tool.ruff]
required-version = ">=0.4.8"
line-length = 120

[tool.ruff.lint]
select = [
    "A001", # Variable {name} is shadowing a Python builtin
    "B002", # Python does not support the unary prefix increment
    "B005", # Using .strip() with multi-character strings is misleading
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "B015", # Pointless comparison. Did you mean to assign a value? Otherwise, prepend assert or remove it.
    "B017", # pytest.raises(BaseException) should be considered evil
    "B018", # Found useless attribute access. Either assign it to a variable or remove it.
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B032", # Possible unintentional type annotation (using :). Did you mean to assign (using =)?
    "B904", # Use raise from to specify exception cause
    "B905", # zip() without an explicit strict= parameter
    "BLE",
    "C", # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D", # docstrings
    "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E", # pycodestyle
    "F", # pyflakes/autoflake
    "FLY", # flynt
    "G", # flake8-logging-format
    "I", # isort
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "ICN001", # import concentions; {name} should be imported as {asname}
    "LOG", # flake8-logging
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF010", # Use explicit conversion flag
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF018", # Avoid assignment expressions in assert statements
    "RUF019", # Unnecessary key check before dictionary access
    # "RUF100", # Unused `noqa` directive; temporarily every now and then to clean them up
    "S102", # Use of exec detected
    "S103", # bad-file-permissions
    "S108", # hardcoded-temp-file
    "S306", # suspicious-mktemp-usage
    "S307", # suspicious-eval-usage
    "S313", # suspicious-xmlc-element-tree-usage
    "S314", # suspicious-xml-element-tree-usage
    "S315", # suspicious-xml-expat-reader-usage
    "S316", # suspicious-xml-expat-builder-usage
    "S317", # suspicious-xml-sax-usage
    "S318", # suspicious-xml-mini-dom-usage
    "S319", # suspicious-xml-pull-dom-usage
    "S320", # suspicious-xmle-tree-usage
    "S601", # paramiko-call
    "S602", # subprocess-popen-with-shell-equals-true
    "S604", # call-with-shell-equals-true
    "S608", # hardcoded-sql-expression
    "S609", # unix-command-wildcard-injection
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "T100", # Trace found: {name} used
    "T20", # flake8-print
    "TID251", # Banned imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle
]

ignore = [
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D406", # Section name should end with a newline
    "D407", # Section name underlining

    "PLC1901", # {existing} can be simplified to {replacement} as an empty string is falsey; too many false positives
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLR0915", # Too many statements
    "TRY003", # Avoid specifying long messages outside the exception class
    "ISC001", # single-line-implicit-string-concatenation
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
voluptuous = "vol"
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.category_registry" = "cr"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.floor_registry" = "fr"
"homeassistant.helpers.issue_registry" = "ir"
"homeassistant.helpers.label_registry" = "lr"
"homeassistant.util.dt" = "dt_util"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"async_timeout".msg = "use asyncio.timeout instead"
"pytz".msg = "use zoneinfo instead"

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = [
    "homeassistant",
]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]

# Allow for main entry & scripts to write to stdout
"homeassistant/__main__.py" = ["T201"]
"homeassistant/scripts/*" = ["T201"]
"script/*" = ["T20"]
"tests/*" = ["D100", "D101", "D103"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[[tool.mypy.overrides]]
module = [
    "serial",
    "serial_asyncio",
    "jsonpath_ng.ext",
    "pytest_homeassistant_custom_component.common",
    "pytest_homeassistant_custom_component.typing",
    "serial.tools",
    "serial.tools.list_ports"
]
ignore_missing_imports = true
